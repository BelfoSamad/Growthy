- For each age range we have multiple games, in each game we have multiple levels, in each level we have multiple variations
	* Each game has a difficulty as meta data

- At first we get the age of the child and we get the easiest game in his age range and the first level of this game
	- After some variations the kid will finish the level
- Each time the kid finishes a level we go to the next level and so on till the end of the game
- When the kid finishes a game we get the next game in difficulty and we repeat the process till we finish the games in that age range
- If a kid finishes all games in that age range, we go to the next age range
------------------------------------------------------------------------------------------------------------------------------------
- Every time we pauses youtube there is a game time (in that slot of time we go through the process described above)
	- When the game time ends, we save:
		- Id of game: The refer to it next time we need it
		- Difficulty of the game: to get the next game in difficulty (if the child finishes the current game)
		- the level the kid is in: (context of where was the kid last time in the current game)
		- the age of the kid (this att is the default age of the kid but it can be incremented if the kid finishes all games of that age range)
-----------------------------------------------------------------------------------------------------------------------------------
- Background Process Work:
	- Get Child infos from popup (child id) -> Use Firebase to get current level of child (new Age, game we're in, level we're in)
	- Based on these information, get the game and inject it in the tab
	- Send the current game level to the game
	- Send action call to the game to finish
	- Receive data from the game when time is up: new current level
	- If the game finishes before time is up: background will receive a callback to get the new game and inject it
	*In case we have to get games from firebase the background.js has to get a notice to download the games before we have to use them to avoid latency
	*the background.js should as well be aware of the saved games (in case the child doesn't need them we delete them)
-----------------------------------------------------------------------------------------------------------------------------------
- The Game Work: the game shouldn't be a story line, we only need games with levels (represent the difficulty increase), and in each level we have multiple variations
	    till the child is ready for the next level
	- receive the current game level: and then go directly to that level
	- receive the action call to stop: stop the game then
		- send the current level of the game
	- Send data to background: prior finishing all levels to make the background process download the next game
	------------------------------------------------------------------------------------------------------------
	- Levels and Variations: for example a math game
		- levels: addition, subtraction, multiplication, division
		- variations in level (addition): 5+5 then 23+50 then 124+984 etc
		*if a game is made by us the levels/variations will be saved in firebase